{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Choice, ResultType } from '../models/game-result.model';\nlet ChifoumiComponent = class ChifoumiComponent {\n  constructor(gameService) {\n    this.gameService = gameService;\n    this.showResultMessage = false;\n  }\n  whowins(playerChoice, computerChoice) {\n    if (playerChoice === computerChoice) {\n      return ResultType.DRAW;\n    }\n    switch (playerChoice) {\n      case 'Ciseaux':\n        return computerChoice === Choice.FEUILLE ? ResultType.WIN : ResultType.LOSE;\n      case 'Pierre':\n        return computerChoice === Choice.CISEAUX ? ResultType.WIN : ResultType.LOSE;\n      case 'Feuille':\n        return computerChoice === Choice.PIERRE ? ResultType.WIN : ResultType.LOSE;\n      default:\n        return ResultType.INVALID;\n    }\n  }\n  stringToChoice(playerChoice) {\n    switch (playerChoice) {\n      case 'Ciseaux':\n        return Choice.CISEAUX;\n      case 'Pierre':\n        return Choice.PIERRE;\n      case 'Feuille':\n        return Choice.FEUILLE;\n      default:\n        return Choice.INVALID;\n    }\n  }\n  play(playerChoice) {\n    this.playerChoice = this.stringToChoice(playerChoice);\n    this.computerChoice = Math.random() > 0.33 ? Choice.CISEAUX : Math.random() > 0.50 ? Choice.PIERRE : Choice.FEUILLE;\n    this.resultOfTheGame = this.whowins(playerChoice, this.computerChoice);\n    this.showResultMessage = true;\n    const gameResult = {\n      playerChoice: this.playerChoice,\n      computerChoice: this.computerChoice,\n      result: this.resultOfTheGame,\n      timestamp: new Date()\n    };\n    this.gameService.playGame(gameResult).subscribe(response => {\n      console.log(response);\n    });\n  }\n  hideResult() {\n    this.showResultMessage = false;\n  }\n};\nChifoumiComponent = __decorate([Component({\n  selector: 'app-chifoumi',\n  templateUrl: './chifoumi.component.html',\n  styleUrls: ['./chifoumi.component.css']\n})], ChifoumiComponent);\nexport { ChifoumiComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,MAAM,EAAcC,UAAU,QAAQ,6BAA6B;AAQrE,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAC1BC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;IAK/B,sBAAiB,GAAG,KAAK;EAHzB;EAOAC,OAAO,CAACC,YAAoB,EAAEC,cAAqB;IAC/C,IAAID,YAAY,KAAKC,cAAc,EAAE;MACjC,OAAON,UAAU,CAACO,IAAI;;IAE1B,QAAQF,YAAY;MAChB,KAAK,SAAS;QACV,OAAQC,cAAc,KAAKP,MAAM,CAACS,OAAO,GAAIR,UAAU,CAACS,GAAG,GAAGT,UAAU,CAACU,IAAI;MACjF,KAAK,QAAQ;QACT,OAAQJ,cAAc,KAAKP,MAAM,CAACY,OAAO,GAAIX,UAAU,CAACS,GAAG,GAAGT,UAAU,CAACU,IAAI;MACjF,KAAK,SAAS;QACV,OAAQJ,cAAc,KAAKP,MAAM,CAACa,MAAM,GAAIZ,UAAU,CAACS,GAAG,GAAGT,UAAU,CAACU,IAAI;MAChF;QACI,OAAOV,UAAU,CAACa,OAAO;IAAC;EAEtC;EAEAC,cAAc,CAACT,YAAmB;IAC9B,QAAQA,YAAY;MAChB,KAAK,SAAS;QACV,OAAON,MAAM,CAACY,OAAO;MACzB,KAAK,QAAQ;QACT,OAAOZ,MAAM,CAACa,MAAM;MACxB,KAAK,SAAS;QACV,OAAOb,MAAM,CAACS,OAAO;MACzB;QACI,OAAOT,MAAM,CAACc,OAAO;IAAC;EAElC;EAEAE,IAAI,CAACV,YAAoB;IACrB,IAAI,CAACA,YAAY,GAAE,IAAI,CAACS,cAAc,CAACT,YAAY,CAAC;IACpD,IAAI,CAACC,cAAc,GAAGU,IAAI,CAACC,MAAM,EAAE,GAAG,IAAI,GAAGlB,MAAM,CAACY,OAAO,GAAGK,IAAI,CAACC,MAAM,EAAE,GAAC,IAAI,GAAGlB,MAAM,CAACa,MAAM,GAAGb,MAAM,CAACS,OAAO;IAGjH,IAAI,CAACU,eAAe,GAAG,IAAI,CAACd,OAAO,CAACC,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC;IAEtE,IAAI,CAACa,iBAAiB,GAAG,IAAI;IAE7B,MAAMC,UAAU,GAAe;MAC3Bf,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,cAAc,EAAE,IAAI,CAACA,cAAc;MACnCe,MAAM,EAAE,IAAI,CAACH,eAAe;MAC5BI,SAAS,EAAE,IAAIC,IAAI;KACpB;IAEH,IAAI,CAACpB,WAAW,CAACqB,QAAQ,CAACJ,UAAU,CAAC,CAACK,SAAS,CAACC,QAAQ,IAAG;MACvDC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACzB,CAAC,CAAC;EACN;EAEAG,UAAU;IACN,IAAI,CAACV,iBAAiB,GAAG,KAAK;EAClC;CAEH;AAhEYlB,iBAAiB,eAL7BH,SAAS,CAAC;EACTgC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW/B,iBAAiB,CAgE7B;SAhEYA,iBAAiB","names":["Component","Choice","ResultType","ChifoumiComponent","constructor","gameService","whowins","playerChoice","computerChoice","DRAW","FEUILLE","WIN","LOSE","CISEAUX","PIERRE","INVALID","stringToChoice","play","Math","random","resultOfTheGame","showResultMessage","gameResult","result","timestamp","Date","playGame","subscribe","response","console","log","hideResult","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Sites\\Chi-fu-mi\\ClientApp\\src\\app\\chifoumi\\chifoumi.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Choice, GameResult, ResultType } from '../models/game-result.model';\r\nimport { GameService } from '../game.service';\r\n\r\n@Component({\r\n  selector: 'app-chifoumi',\r\n  templateUrl: './chifoumi.component.html',\r\n  styleUrls: ['./chifoumi.component.css']\r\n})\r\nexport class ChifoumiComponent {\r\n    constructor(private gameService:GameService) {   \r\n\r\n    }\r\n    playerChoice? : Choice;\r\n    computerChoice? : Choice;\r\n    showResultMessage = false;\r\n    resultOfTheGame?: ResultType;\r\n    resultMessage?:string;\r\n    \r\n    whowins(playerChoice :string, computerChoice:string):ResultType{\r\n        if (playerChoice === computerChoice) {\r\n            return ResultType.DRAW;\r\n        }\r\n        switch (playerChoice) {\r\n            case 'Ciseaux':\r\n                return (computerChoice === Choice.FEUILLE) ? ResultType.WIN : ResultType.LOSE;\r\n            case 'Pierre':\r\n                return (computerChoice === Choice.CISEAUX) ? ResultType.WIN : ResultType.LOSE;\r\n            case 'Feuille':\r\n                return (computerChoice === Choice.PIERRE) ? ResultType.WIN : ResultType.LOSE;\r\n            default:\r\n                return ResultType.INVALID;\r\n        }\r\n    }\r\n\r\n    stringToChoice(playerChoice:string){\r\n        switch (playerChoice) {\r\n            case 'Ciseaux':\r\n                return Choice.CISEAUX;\r\n            case 'Pierre':\r\n                return Choice.PIERRE;\r\n            case 'Feuille':\r\n                return Choice.FEUILLE;\r\n            default:\r\n                return Choice.INVALID;\r\n        }\r\n    }\r\n\r\n    play(playerChoice: string) {\r\n        this.playerChoice= this.stringToChoice(playerChoice);\r\n        this.computerChoice = Math.random() > 0.33 ? Choice.CISEAUX : Math.random()>0.50 ? Choice.PIERRE : Choice.FEUILLE;\r\n\r\n\r\n        this.resultOfTheGame = this.whowins(playerChoice, this.computerChoice);\r\n        \r\n        this.showResultMessage = true;\r\n\r\n        const gameResult: GameResult = {\r\n            playerChoice: this.playerChoice,\r\n            computerChoice: this.computerChoice ,\r\n            result: this.resultOfTheGame,\r\n            timestamp: new Date()\r\n          };\r\n        \r\n        this.gameService.playGame(gameResult).subscribe(response => {\r\n            console.log(response);\r\n        });\r\n    }\r\n\r\n    hideResult() {\r\n        this.showResultMessage = false;\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}